import { OneSignal } from 'react-native-onesignal';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform, Alert } from 'react-native';
import { APP_CONFIG } from '../constants/config';

/**
 * Servicio especializado para manejar suscripciones de OneSignal
 * Asegura que todos los usuarios se registren correctamente
 */
class OneSignalSubscriptionService {
  constructor() {
    this.isInitialized = false;
    this.subscriptionAttempts = 0;
    this.maxAttempts = 3;
  }

  /**
   * Inicializa la suscripci√≥n completa
   */
  async initializeSubscription() {
    if (this.isInitialized) return;

    try {
      console.log('üîÑ Iniciando proceso de suscripci√≥n OneSignal...');
      
      // Paso 1: Verificar que OneSignal est√© inicializado
      await this.ensureOneSignalReady();
      
      // Paso 2: Solicitar permisos
      const hasPermissions = await this.requestNotificationPermissions();
      
      if (!hasPermissions) {
        console.warn('‚ö†Ô∏è Permisos de notificaci√≥n no otorgados');
        return false;
      }
      
      // Paso 3: Configurar usuario autom√°ticamente
      await this.autoConfigureUser();
      
      // Paso 4: Verificar suscripci√≥n
      const isSubscribed = await this.verifySubscription();
      
      if (isSubscribed) {
        console.log('‚úÖ Usuario suscrito exitosamente a OneSignal');
        this.isInitialized = true;
        return true;
      } else {
        console.warn('‚ùå No se pudo completar la suscripci√≥n');
        return false;
      }
      
    } catch (error) {
      console.error('Error en inicializaci√≥n de suscripci√≥n:', error);
      return false;
    }
  }

  /**
   * Asegura que OneSignal est√© listo
   */
  async ensureOneSignalReady() {
    console.log('üîç Verificando estado de OneSignal...');
    
    // Verificar que OneSignal est√© inicializado
    try {
      const deviceState = await OneSignal.getDeviceState();
      console.log('üì± Estado del dispositivo OneSignal:', {
        hasNotificationPermission: deviceState?.hasNotificationPermission,
        isSubscribed: deviceState?.isSubscribed,
        userId: deviceState?.userId?.substring(0, 8) + '...'
      });
      
      return true;
    } catch (error) {
      console.error('Error obteniendo estado del dispositivo:', error);
      throw error;
    }
  }

  /**
   * Solicita permisos de notificaci√≥n de forma agresiva
   */
  async requestNotificationPermissions() {
    console.log('üìã Solicitando permisos de notificaci√≥n...');
    
    try {
      // Para Android, solicitar permiso POST_NOTIFICATIONS
      if (Platform.OS === 'android' && Platform.Version >= 33) {
        const { PermissionsAndroid } = require('react-native');
        const permission = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS,
          {
            title: 'Permisos de Notificaci√≥n',
            message: 'VoluntariosGT necesita enviar notificaciones sobre nuevas actividades y actualizaciones importantes.',
            buttonNeutral: 'Preguntar despu√©s',
            buttonNegative: 'Cancelar',
            buttonPositive: 'OK',
          }
        );
        
        console.log('Android permission result:', permission);
        
        if (permission !== PermissionsAndroid.RESULTS.GRANTED) {
          Alert.alert(
            'Permisos Necesarios',
            'Las notificaciones son importantes para mantenerte informado sobre nuevas oportunidades de voluntariado.',
            [{ text: 'Entendido' }]
          );
        }
      }
      
      // Solicitar autorizaci√≥n de OneSignal
      const authStatus = await OneSignal.Notifications.requestPermission(true);
      
      console.log('üìã Estado de autorizaci√≥n OneSignal:', authStatus);
      
      const isAuthorized = 
        authStatus === OneSignal.OSNotificationPermission.Authorized ||
        authStatus === OneSignal.OSNotificationPermission.Provisional ||
        authStatus === true; // Para compatibilidad
      
      if (isAuthorized) {
        console.log('‚úÖ Permisos de notificaci√≥n otorgados');
        return true;
      } else {
        console.warn('‚ùå Permisos de notificaci√≥n denegados');
        return false;
      }
      
    } catch (error) {
      console.error('Error solicitando permisos:', error);
      return false;
    }
  }

  /**
   * Configura autom√°ticamente el usuario
   */
  async autoConfigureUser() {
    console.log('üë§ Configurando usuario autom√°ticamente...');
    
    try {
      // Obtener datos del usuario guardados
      const userDataString = await AsyncStorage.getItem('user_data');
      
      if (userDataString) {
        const userData = JSON.parse(userDataString);
        console.log('üë§ Usuario encontrado:', userData.email);
        
        // Configurar external user ID
        OneSignal.login(userData.id.toString());
        
        // Configurar tags b√°sicos
        const tags = {
          user_id: userData.id.toString(),
          user_type: userData.tipo_usuario || 'voluntario',
          email: userData.email,
          platform: Platform.OS,
          app_version: APP_CONFIG.version,
          registration_date: new Date().toISOString(),
          last_active: new Date().toISOString()
        };
        
        // Agregar tags espec√≠ficos seg√∫n el tipo de usuario
        if (userData.tipo_usuario === 'voluntario') {
          tags.volunteer_status = 'active';
          tags.interests = userData.intereses || [];
        } else if (userData.tipo_usuario === 'entidad') {
          tags.entity_type = userData.tipo_organizacion || 'ngo';
          tags.organization_name = userData.nombre_organizacion || '';
        }
        
        OneSignal.User.addTags(tags);
        
        console.log('üè∑Ô∏è Tags configurados:', Object.keys(tags));
      } else {
        console.log('üë§ No hay usuario logueado, configurando usuario an√≥nimo...');
        
        // Configurar usuario an√≥nimo temporal
        const anonymousId = `anonymous_${Date.now()}`;
        OneSignal.login(anonymousId);
        
        OneSignal.User.addTags({
          user_type: 'anonymous',
          platform: Platform.OS,
          app_version: APP_CONFIG.version,
          registration_date: new Date().toISOString()
        });
      }
      
      return true;
    } catch (error) {
      console.error('Error configurando usuario:', error);
      return false;
    }
  }

  /**
   * Verifica que la suscripci√≥n sea exitosa
   */
  async verifySubscription() {
    console.log('‚úÖ Verificando suscripci√≥n...');
    
    try {
      // Esperar un poco para que se procese la suscripci√≥n
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const deviceState = await OneSignal.getDeviceState();
      
      if (deviceState) {
        console.log('üìä Estado final del dispositivo:', {
          isSubscribed: deviceState.isSubscribed,
          hasNotificationPermission: deviceState.hasNotificationPermission,
          userId: deviceState.userId?.substring(0, 8) + '...',
          pushToken: deviceState.pushToken ? 'S√≠' : 'No'
        });
        
        // Guardar informaci√≥n de suscripci√≥n
        await AsyncStorage.setItem('oneSignal_subscription', JSON.stringify({
          isSubscribed: deviceState.isSubscribed,
          userId: deviceState.userId,
          subscriptionDate: new Date().toISOString()
        }));
        
        return deviceState.isSubscribed && deviceState.hasNotificationPermission;
      }
      
      return false;
    } catch (error) {
      console.error('Error verificando suscripci√≥n:', error);
      return false;
    }
  }

  /**
   * Reintenta la suscripci√≥n si falla
   */
  async retrySubscription() {
    if (this.subscriptionAttempts >= this.maxAttempts) {
      console.warn('‚ùå M√°ximo n√∫mero de intentos de suscripci√≥n alcanzado');
      return false;
    }
    
    this.subscriptionAttempts++;
    console.log(`üîÑ Reintentando suscripci√≥n (intento ${this.subscriptionAttempts}/${this.maxAttempts})...`);
    
    // Esperar antes de reintentar
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    this.isInitialized = false;
    return await this.initializeSubscription();
  }

  /**
   * Obtiene el ID de OneSignal del usuario
   */
  async getOneSignalUserId() {
    try {
      const deviceState = await OneSignal.getDeviceState();
      return deviceState?.userId || null;
    } catch (error) {
      console.error('Error obteniendo OneSignal User ID:', error);
      return null;
    }
  }

  /**
   * Verifica si el usuario est√° suscrito
   */
  async isUserSubscribed() {
    try {
      const deviceState = await OneSignal.getDeviceState();
      return deviceState?.isSubscribed || false;
    } catch (error) {
      console.error('Error verificando suscripci√≥n:', error);
      return false;
    }
  }

  /**
   * Fuerza la suscripci√≥n del usuario
   */
  async forceSubscription() {
    console.log('üî® Forzando suscripci√≥n...');
    
    try {
      // Opt-in expl√≠citamente
      OneSignal.User.pushSubscription.optIn();
      
      // Configurar preferencias de notificaci√≥n
      await AsyncStorage.setItem('notification_preferences', JSON.stringify({
        enabled: true,
        types: ['new_activities', 'reminders', 'updates'],
        updatedAt: new Date().toISOString()
      }));
      
      console.log('‚úÖ Suscripci√≥n forzada completada');
      return true;
    } catch (error) {
      console.error('Error forzando suscripci√≥n:', error);
      return false;
    }
  }

  /**
   * Diagnostica problemas de suscripci√≥n
   */
  async diagnoseSubscriptionIssues() {
    console.log('üîç Diagnosticando problemas de suscripci√≥n...');
    
    const diagnosis = {
      timestamp: new Date().toISOString(),
      platform: Platform.OS,
      platformVersion: Platform.Version,
      appId: APP_CONFIG.ONESIGNAL.APP_ID,
      issues: [],
      recommendations: []
    };
    
    try {
      // Verificar estado del dispositivo
      const deviceState = await OneSignal.getDeviceState();
      
      if (!deviceState) {
        diagnosis.issues.push('No se puede obtener estado del dispositivo');
        diagnosis.recommendations.push('Verificar inicializaci√≥n de OneSignal');
      } else {
        diagnosis.deviceState = {
          isSubscribed: deviceState.isSubscribed,
          hasNotificationPermission: deviceState.hasNotificationPermission,
          userId: deviceState.userId ? 'Presente' : 'Ausente',
          pushToken: deviceState.pushToken ? 'Presente' : 'Ausente'
        };
        
        if (!deviceState.hasNotificationPermission) {
          diagnosis.issues.push('Sin permisos de notificaci√≥n');
          diagnosis.recommendations.push('Solicitar permisos de notificaci√≥n nuevamente');
        }
        
        if (!deviceState.isSubscribed) {
          diagnosis.issues.push('Usuario no suscrito');
          diagnosis.recommendations.push('Llamar OneSignal.User.pushSubscription.optIn()');
        }
        
        if (!deviceState.userId) {
          diagnosis.issues.push('Sin User ID de OneSignal');
          diagnosis.recommendations.push('Verificar conexi√≥n a internet y configuraci√≥n del App ID');
        }
      }
      
      console.log('üìã Diagn√≥stico completo:', diagnosis);
      return diagnosis;
      
    } catch (error) {
      diagnosis.issues.push(`Error en diagn√≥stico: ${error.message}`);
      console.error('Error en diagn√≥stico:', error);
      return diagnosis;
    }
  }
}

// Exportar instancia singleton
export const oneSignalSubscription = new OneSignalSubscriptionService();
export default oneSignalSubscription;